---
import Layout from "@/layouts/Layout.astro";
import { NavigationItem } from "@/components/dashboard/NavigationItem.tsx";
import { WelcomeModal } from "@/components/dashboard/WelcomeModal.tsx";

// Dodatkowe zabezpieczenie: Middleware powinno już to obsłużyć,
// ale dla pewności możemy sprawdzić Astro.locals.user
if (!Astro.locals.user) {
  return Astro.redirect("/login");
}

const user = Astro.locals.user;
const userName = user?.email?.split("@")[0] || "Użytkowniku";

// Sprawdź, czy użytkownik widział już modal
// user_metadata może nie istnieć lub flaga może nie być ustawiona (undefined traktujemy jako false)
const hasSeenWelcomeModal = !!user?.user_metadata?.has_seen_welcome_modal;

const navigationItems = [
  {
    title: "Generuj fiszki z AI",
    href: "/generate-ai",
    description: "Automatycznie twórz zestawy fiszek na podstawie Twoich materiałów.",
  },
  {
    title: "Generuj fiszki do nauki języka",
    href: "/generate-language-flashcards",
    description: "Twórz słownictwo tematyczne do nauki języków obcych.",
  },
  {
    title: "Stwórz fiszki manualnie",
    href: "/create-manual",
    description: "Pełna kontrola nad procesem tworzenia Twoich fiszek.",
  },
  {
    title: "Moje zestawy fiszek",
    href: "/my-flashcards",
    description: "Przeglądaj i zarządzaj swoimi kolekcjami fiszek.",
  },
];
---

<Layout title="Dashboard - 10x Cards">
  <main class="container mx-auto py-8 px-4">
    <header class="mb-12">
      <h1 class="text-4xl font-bold tracking-tight text-foreground sm:text-5xl">
        Witaj, <span class="text-primary">{userName}</span>!
      </h1>
      <p class="mt-4 text-lg text-muted-foreground">
        Co chcesz dzisiaj zrobić? Wybierz jedną z poniższych opcji, aby rozpocząć.
      </p>
    </header>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {
        navigationItems.map((item) => (
          <NavigationItem client:load title={item.title} href={item.href} description={item.description} />
        ))
      }
    </div>
  </main>

  {
    !hasSeenWelcomeModal && (
      <WelcomeModal
        client:load
        userName={userName}
        isOpenInitially={true}
        onClose={() => {
          // Ta funkcja jest wywoływana, gdy modal się zamknie.
          // Możemy tu potencjalnie zarządzać stanem po stronie klienta,
          // aby modal nie pojawił się ponownie bez odświeżenia strony,
          // ale główna logika opiera się na `hasSeenWelcomeModal` z serwera.
          // Na razie pozostawiamy to puste, ponieważ komponent sam obsługuje swoje zamknięcie.
        }}
      />
    )
  }
</Layout>

<style>
  /* Można dodać specyficzne style dla Dashboard tutaj, jeśli Tailwind nie wystarcza */
</style>
